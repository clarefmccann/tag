"0",""
"0","## loading in function to calculate precise age "
"0",""
"0","age_calc <- function(dob, enddate=Sys.Date(), units='months', precise=TRUE){"
"0","  if (!inherits(dob, ""Date"") | !inherits(enddate, ""Date"")) {"
"0","    stop(""Both dob and enddate must be Date class objects"")"
"0","  }"
"0","  if (any(enddate < dob)) {"
"0","    stop(""End date must be a date after date of birth"")"
"0","  }"
"0","  start <- as.POSIXlt(dob)"
"0","  end <- as.POSIXlt(enddate)"
"0","  if (precise) {"
"0","    start_is_leap <- ifelse(start$year %% 400 == 0, TRUE,"
"0","                            ifelse(start$year %% 100 == 0, FALSE,"
"0","                                   ifelse(start$year %% 4 == 0, TRUE, FALSE)))"
"0","    end_is_leap <- ifelse(end$year %% 400 == 0, TRUE,"
"0","                          ifelse(end$year %% 100 == 0, FALSE,"
"0","                                 ifelse(end$year %% 4 == 0, TRUE, FALSE)))"
"0","  }"
"0","  if (units == 'days') {"
"0","    result <- difftime(end, start, units = 'days')"
"0","  } else if (units == 'months') {"
"0","    months <- vapply(mapply(seq, as.POSIXct(start), as.POSIXct(end),"
"0","                            by = 'months', SIMPLIFY = FALSE),"
"0","                     length, FUN.VALUE = length(start)) - 1"
"0","    # length(seq(start, end, by='month')) - 1"
"0","    if (precise) {"
"0","      month_length_end <- ifelse(end$mon == 1 & end_is_leap, 29,"
"0","                                 ifelse(end$mon == 1, 28,"
"0","                                        ifelse(end$mon %in% c(3, 5, 8, 10),"
"0","                                               30, 31)))"
"0","      month_length_prior <- ifelse((end$mon - 1) == 1 & start_is_leap, 29,"
"0","                                   ifelse((end$mon - 1) == 1, 28,"
"0","                                        ifelse((end$mon - 1) %in% c(3, 5, 8, 10),"
"0","                                                 30, 31)))"
"0","      month_frac <- ifelse(end$mday > start$mday,"
"0","                           (end$mday - start$mday) / month_length_end,"
"0","                           ifelse(end$mday < start$mday,"
"0","                                  (month_length_prior - start$mday) /"
"0","                                    month_length_prior +"
"0","                                    end$mday/month_length_end, 0.0))"
"0","      result <- months + month_frac"
"0","    }else{"
"0","      result <- months"
"0","    }"
"0","  } else if (units == 'years') {"
"0","    years <- vapply(mapply(seq, as.POSIXct(start), as.POSIXct(end),"
"0","                           by = 'years', SIMPLIFY = FALSE),"
"0","                    length, FUN.VALUE = length(start)) - 1"
"0","    if (precise) {"
"0","      start_length <- ifelse(start_is_leap, 366, 365)"
"0","      end_length <- ifelse(end_is_leap, 366, 365)"
"0","      start_day <- ifelse(start_is_leap & start$yday >= 60,"
"0","                          start$yday - 1,"
"0","                          start$yday)"
"0","      end_day <- ifelse(end_is_leap & end$yday >= 60,"
"0","                        end$yday - 1,"
"0","                        end$yday)"
"0","      year_frac <- ifelse(start_day < end_day,"
"0","                          (end_day - start_day)/end_length,"
"0","                          ifelse(start_day > end_day,"
"0","                                 (start_length - start_day) / start_length +"
"0","                                   end_day / end_length, 0.0))"
"0","      result <- years + year_frac"
"0","    }else{"
"0","      result <- years"
"0","    }"
"0","  }else{"
"0","    stop(""Unrecognized units. Please choose years, months, or days."")"
"0","  }"
"0","  return(result)"
"0","}"
"0",""
"0",""
"0",""
"0","ace$session_date <- as.Date(ace$session_date)"
"0",""
"0","## TAG General calulcation"
"0",""
"0","age_all <- full_join(long_doc, dob, by=""TAGID"") %>%"
"0","   filter(!is.na(session_date),"
"0","          !is.na(DOB))"
"0",""
"0","## converting to date class"
"0",""
"0","age_all$session_date <- as.Date(age_all$session_date)"
"0","age_all$DOB <- as.Date(age_all$DOB)"
"0",""
"0","## calculating age from DOB & session dates"
"0",""
"0","age_all$age <- age_calc(age_all$DOB, enddate = age_all$session_date, units = ""years"", precise = TRUE)"
"0",""
"0","## converting ace session dates to date class for merge "
"0",""
"0","ace$session_date <- as.Date(ace$session_date)"
"0",""
"0","## exporting csv of TAG general ages to clean up outside of R"
"0",""
"0","write.csv(age_all, ""age.csv"")"
"0",""
"0",""
